{"version":3,"sources":["App4.js","serviceWorker.js","index.js"],"names":["allUsers","ContactSearch","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","filteredUsers","e","text","currentTarget","value","getFilteredUsersForText","setState","filter","user","toLowerCase","includes","react_default","a","createElement","onInput","filterUsers","bind","App4_UsersList","users","React","Component","UsersList","_ref","length","map","key","App4","App4_ContactSearch","Boolean","window","location","hostname","match","ReactDOM","render","src_App4","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAKMA,eAAW,CAAC,SAAU,QAAS,QAAS,QAAS,QAAS,SAE1DC,cACJ,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAEKI,MAAQ,CAAEC,cAAeV,GAHlBE,2EAMFS,GAEV,IAAMC,EAAOD,EAAEE,cAAcC,MAEvBJ,EAAgBL,KAAKU,wBAAwBH,GAEnDP,KAAKW,SAAS,CACZN,kEAKoBE,GACtB,OAAOZ,EAASiB,OAAO,SAAAC,GAAI,OAAIA,EAAKC,cAAcC,SAASR,EAAKO,kDAIhE,OACEE,EAAAC,EAAAC,cAAA,WAEEF,EAAAC,EAAAC,cAAA,SAAOC,QAASnB,KAAKoB,YAAYC,KAAKrB,QAEtCgB,EAAAC,EAAAC,cAACI,EAAD,CAAWC,MAAOvB,KAAKI,MAAMC,wBA7BTmB,IAAMC,WAoC5BC,EAAY,SAAAC,GAAe,IAAZJ,EAAYI,EAAZJ,MAEnB,OAAIA,EAAMK,OAAS,EAEfZ,EAAAC,EAAAC,cAAA,UAEGK,EAAMM,IAAI,SAAAhB,GAAI,OAAIG,EAAAC,EAAAC,cAAA,MAAIY,IAAKjB,GAAOA,MAMvCG,EAAAC,EAAAC,cAAA,yBAcWa,mLARX,OACEf,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACc,EAAD,cAJWR,IAAMC,WC/CLQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAAUC,SAASC,eAAe,SD2H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2b86d551.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport './../node_modules/semantic-ui-css/semantic.min.css';\n\n//definiujemy tablicę z listą imion\nconst allUsers = ['Michal', 'Kasia', 'Jacek', 'Marta', 'Tomek', 'Ania'];\n\nclass ContactSearch extends React.Component {\n  constructor() {\n    super();\n    // początkowy stan wyfiltrowanej listy\n    this.state = { filteredUsers: allUsers };\n  }\n  \n  filterUsers(e) {\n    // pobieramy wartość z inputa\n    const text = e.currentTarget.value;\n    // filtrujemy tablicę wg pewnych kryteriów (oddzielna funckja poniżej)\n    const filteredUsers = this.getFilteredUsersForText(text)\n    // ustawiamy stan na filteredUsers\n    this.setState({\n      filteredUsers\n    })\n  }\n  \n  // dodatkowa funkcja, która filtruje zawartość tablicy na podstawie porównania elementu z wpisanym tekstem\n  getFilteredUsersForText(text) {\n    return allUsers.filter(user => user.toLowerCase().includes(text.toLowerCase()))\n  }\n  \n  render () {\n    return (\n      <div>\n        {/* input ma zdarzenie on Input, dzięki któremu uruchamiane jest filtrowanie listy */}\n        <input onInput={this.filterUsers.bind(this)} />\n        {/* element, który wyświetli się w zależności od przekazanych propsów */}\n        <UsersList users={this.state.filteredUsers} />\n      </div>\n    );\n  }\n};\n\n// wydzielona stała, która zawiera listę\nconst UsersList = ({ users }) => {\n  // jeśli jakiekolwiek elementy zostaną wyfiltrowane, to ma nam wyświetlić listę\n  if (users.length > 0) {\n    return (\n      <ul>\n        {/* tablicę users mapujemy na listę elementów */}\n        {users.map(user => <li key={user}>{user}</li>)}\n      </ul>\n    );\n  }\n  // w przeciwnym razie ma wyświetlić info o braku wyników\n  return (\n    <p>No results!</p>\n  );\n};\n\nclass App4 extends React.Component {\n  render() {\n    return (\n      <div>\n        <ContactSearch />\n      </div>\n    );\n  }\n}\n\nexport default App4;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App4 from './App4';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App4 />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}